#pragma once
#include <SDL2/SDL.h>
/* TODO: - Long term -
* Create custom key mapings. Dont just map keys to SDLKs
*/
typedef enum {
    S_KEY_NONE      = 0,
    S_KEY_UNKNOWN	= SDLK_UNKNOWN,
    S_KEY_BACKSPACE	= SDLK_BACKSPACE,
    S_KEY_TAB		= SDLK_TAB,
    S_KEY_CLEAR		= SDLK_CLEAR,
    S_KEY_RETURN	= SDLK_RETURN,
    S_KEY_RETURN2   = SDLK_RETURN2,
    S_KEY_PAUSE		= SDLK_PAUSE,
    S_KEY_ESCAPE	= SDLK_ESCAPE,
    S_KEY_CAPSLOCK  = SDLK_CAPSLOCK,
    S_KEY_PRINTSCREEN = SDLK_PRINTSCREEN,
    S_KEY_SCROLLLOCK= SDLK_SCROLLLOCK,
    S_KEY_NUMLOCKCLEAR= SDLK_NUMLOCKCLEAR,
    S_KEY_SPACE		= SDLK_SPACE,
    S_KEY_EXCLAIM	= SDLK_EXCLAIM,
    S_KEY_QUOTEDBL	= SDLK_QUOTEDBL,
    S_KEY_HASH		= SDLK_HASH,
    S_KEY_DOLLAR	= SDLK_DOLLAR,
    S_KEY_AMPERSAND = SDLK_AMPERSAND,
    S_KEY_QUOTE		= SDLK_QUOTE,
    S_KEY_LEFTPAREN	= SDLK_LEFTPAREN,
    S_KEY_RIGHTPAREN= SDLK_RIGHTPAREN,
    S_KEY_ASTERISK	= SDLK_ASTERISK,
    S_KEY_PLUS		= SDLK_PLUS,
    S_KEY_COMMA		= SDLK_COMMA,
    S_KEY_MINUS		= SDLK_MINUS,
    S_KEY_PERIOD	= SDLK_PERIOD,
    S_KEY_SLASH		= SDLK_SLASH,
    S_KEY_0			= SDLK_0,
    S_KEY_1			= SDLK_1,
    S_KEY_2			= SDLK_2,
    S_KEY_3			= SDLK_3,
    S_KEY_4			= SDLK_4,
    S_KEY_5			= SDLK_5,
    S_KEY_6			= SDLK_6,
    S_KEY_7			= SDLK_7,
    S_KEY_8			= SDLK_8,
    S_KEY_9			= SDLK_9,
    S_KEY_COLON		= SDLK_COLON,
    S_KEY_SEMICOLON	= SDLK_SEMICOLON,
    S_KEY_LESS		= SDLK_LESS,
    S_KEY_EQUALS	= SDLK_EQUALS,
    S_KEY_GREATER	= SDLK_GREATER,
    S_KEY_QUESTION	= SDLK_QUESTION,
    S_KEY_AT		= SDLK_AT,

    /* ASCII mapped keys */
    S_KEY_LEFTBRACKET	= SDLK_LEFTBRACKET,
    S_KEY_BACKSLASH		= SDLK_BACKSLASH,
    S_KEY_RIGHTBRACKET	= SDLK_RIGHTBRACKET,
    S_KEY_CARET			= SDLK_CARET,
    S_KEY_UNDERSCORE	= SDLK_UNDERSCORE,
    S_KEY_BACKQUOTE		= SDLK_BACKQUOTE,
    S_KEY_a			    = SDLK_a,
    S_KEY_b			    = SDLK_b,
    S_KEY_c			    = SDLK_c,
    S_KEY_d			    = SDLK_d,
    S_KEY_e			    = SDLK_e,
    S_KEY_f			    = SDLK_f,
    S_KEY_g			    = SDLK_g,
    S_KEY_h			    = SDLK_h,
    S_KEY_i			    = SDLK_i,
    S_KEY_j			    = SDLK_j,
    S_KEY_k			    = SDLK_k,
    S_KEY_l			    = SDLK_l,
    S_KEY_m			    = SDLK_m,
    S_KEY_n			    = SDLK_n,
    S_KEY_o			    = SDLK_o,
    S_KEY_p			    = SDLK_p,
    S_KEY_q			    = SDLK_q,
    S_KEY_r			    = SDLK_r,
    S_KEY_s			    = SDLK_s,
    S_KEY_t			    = SDLK_t,
    S_KEY_u			    = SDLK_u,
    S_KEY_v			    = SDLK_v,
    S_KEY_w			    = SDLK_w,
    S_KEY_x			    = SDLK_x,
    S_KEY_y			    = SDLK_y,
    S_KEY_z			    = SDLK_z,
    S_KEY_DELETE	    = SDLK_DELETE,

    S_KEY_ASCII_END,

    /* Numeric keypad */
    S_KEY_KP_PEROID		= SDLK_KP_PERIOD,
    S_KEY_KP_DIVIDE		= SDLK_KP_DIVIDE,
    S_KEY_KP_MULTIPLY	= SDLK_KP_MULTIPLY,
    S_KEY_KP_MINUS		= SDLK_KP_MINUS,
    S_KEY_KP_PLUS		= SDLK_KP_PLUS,
    S_KEY_KP_ENTER		= SDLK_KP_ENTER,
    S_KEY_KP_EQUALS		= SDLK_KP_EQUALS,

    /* Arrows + Home/End pad */
    S_KEY_UP		= SDLK_UP,
    S_KEY_DOWN		= SDLK_DOWN,
    S_KEY_RIGHT		= SDLK_RIGHT,
    S_KEY_LEFT		= SDLK_LEFT,
    S_KEY_INSERT	= SDLK_INSERT,
    S_KEY_HOME		= SDLK_HOME,
    S_KEY_END		= SDLK_END,
    S_KEY_PAGEUP	= SDLK_PAGEUP,
    S_KEY_PAGEDOWN	= SDLK_PAGEDOWN,
    S_KEY_UNDO      = SDLK_UNDO,
    S_KEY_CUT       = SDLK_CUT,
    S_KEY_COPY      = SDLK_COPY,
    S_KEY_PASTE     = SDLK_PASTE,
    S_KEY_FIND      = SDLK_FIND,

    /* Function keys */
    S_KEY_F1			= SDLK_F1,
    S_KEY_F2			= SDLK_F2,
    S_KEY_F3			= SDLK_F3,
    S_KEY_F4			= SDLK_F4,
    S_KEY_F5			= SDLK_F5,
    S_KEY_F6			= SDLK_F6,
    S_KEY_F7			= SDLK_F7,
    S_KEY_F8			= SDLK_F8,
    S_KEY_F9			= SDLK_F9,
    S_KEY_F10			= SDLK_F10,
    S_KEY_F11			= SDLK_F11,
    S_KEY_F12			= SDLK_F12,
    S_KEY_F13			= SDLK_F13,
    S_KEY_F14			= SDLK_F14,
    S_KEY_F15			= SDLK_F15,

    /* Key state modifier keys */
    S_KEY_RSHIFT	= SDLK_RSHIFT,
    S_KEY_LSHFIT	= SDLK_LSHIFT,
    S_KEY_RCTRL		= SDLK_RCTRL,
    S_KEY_LCTRL		= SDLK_LCTRL,
    S_KEY_RALT		= SDLK_RALT,
    S_KEY_LALT		= SDLK_LALT,

    S_KEY_LAST,
} StormKey;

typedef enum {
    S_POINTER_LEFT      = 1,
    S_POINTER_RIGHT     = 2,
    S_POINTER_MIDDLE    = 3
} StormPointers;